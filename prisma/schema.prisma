// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Post {
  id        String   @id @default(uuid()) @db.Uuid
  caption   String?
  createdAt DateTime @default(now()) @map("created_at") @db.Timestamptz()
  likes     Int      @default(0) //still keeping this here for easy quering
  views     Int      @default(0) // will use this when I implement the intersection observer API
  userId    String   @map("user_id")

  comments  Comment[]
  media     Media[]
  postLikes PostLikes[]
  postViews PostViews[]

  @@map("post")
}

model PostLikes {
  postId String @map("post_id") @db.Uuid
  userId String @map("user_id")

  post Post @relation(fields: [postId], references: [id])

  @@id([postId, userId])
  @@map("post_likes")
}

model PostViews {
  postId String @map("post_id") @db.Uuid
  userId String @map("user_id")

  post Post @relation(fields: [postId], references: [id])

  @@id([postId, userId])
  @@map("post_views")
}

// *****TODO: ATTACH USER TO MEDIA AND POST*****
// well if I do this, I don't technically need the "mediaUrls" in my post table, will keep that in mind
model Media {
  id        String   @id @default(uuid())
  type      String   @db.VarChar(20)
  url       String
  userId    String   @map("user_id") //clerk userId
  postId    String   @map("post_id") @db.Uuid
  createdAt DateTime @default(now()) @map("created_at") @db.Timestamptz()

  post Post @relation(fields: [postId], references: [id], onDelete: Cascade)

  @@map("media")
}

model Comment {
  id        String   @id @default(uuid()) @db.Uuid
  text      String
  createdAt DateTime @default(now()) @map("created_at") @db.Timestamptz()
  updatedAt DateTime @default(now()) @map("updated_at") @db.Timestamptz()
  likes     Int      @default(0)

  userId String @map("user_id") //clerk user id

  postId String @map("post_id") @db.Uuid
  post   Post   @relation(fields: [postId], references: [id], onDelete: Cascade)

  parentId String?  @map("parent_id") @db.Uuid
  parent   Comment? @relation("ParentChild", fields: [parentId], references: [id], onDelete: Cascade)

  replies Comment[] @relation("ParentChild")

  commentLikes CommentLikes[]

  @@map("comment")
}

model CommentLikes {
  commentId String @map("comment_id") @db.Uuid
  userId    String @map("user_id")

  post Comment @relation(fields: [commentId], references: [id])

  @@id([commentId, userId])
  @@map("comment_likes")
}

model Event {
  id          String    @id @default(uuid()) @db.Uuid
  name        String
  description String
  type        EventType
  location    String?
  startDate   DateTime  @map("start_date")
  endDate     DateTime  @map("end_date")
  organizerId String    @map("organizer_id") //clerk user id

  @@map("event")
}

model event_users {
  userId  String @map("user_id")
  eventId String @map("event_id")

  @@id([userId, eventId])
  @@map("event_users")
}

enum EventType {
  ONLINE
  ONSITE
}

model Group {
  id          String   @id @default(uuid())
  name        String
  description String
  createdAt   DateTime @default(now()) @db.Timestamptz()
  adminId     String   @map("admin_id")

  @@map("group")
}

model group_users {
  userId  String @map("user_id")
  groupId String @map("group_id")

  @@id([userId, groupId])
  @@map("group_users")
}
