generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model UserCoverImages {
  id       String  @id @default(uuid()) @db.Uuid
  url      String
  userId   String  @map("user_id") //clerk userId
  isActive Boolean @map("is_active") @db.Boolean

  @@map("user_cover_images")
}

model UserStory {
  id        String   @id @default(uuid()) @db.Uuid
  mediaType String   @map("media_type") @db.VarChar(20) // e.g., "image", "video"
  mediaUrl  String   @map("media_url")
  createdAt DateTime @default(now()) @map("created_at") @db.Timestamptz()
  expiresAt DateTime @map("expires_at") @db.Timestamptz()
  userId    String   @map("user_id") //clerk userId
  views     Int      @default(0)

  storyViews StoryViews[]

  @@map("user_stories")
}

model StoryViews {
  storyId String @map("story_id") @db.Uuid
  userId  String @map("user_id")

  userStory UserStory @relation(fields: [storyId], references: [id], onDelete: Cascade)

  @@id([storyId, userId])
  @@map("story_views")
}

enum FriendRequestStatus {
  PENDING
  ACCEPTED
  DENIED

  @@map("friend_request_status")
}

//if a friend req is denied, it might not be needed to kept in the table
//but this will suffice for now, I presume
//also, sent and received don't need to be separate tables, one will suffice with the current requirements
model FriendRequests {
  senderId   String              @map("user_a_id")
  receiverId String              @map("user_b_id")
  createdAt  DateTime            @default(now()) @map("created_at") @db.Timestamptz()
  status     FriendRequestStatus @default(PENDING)

  @@id([senderId, receiverId])
  @@unique([senderId, receiverId])
  @@map("friend_requests")
}

model Friend {
  userId    String   @map("user_id")
  friendId  String   @map("friend_id")
  createdAt DateTime @default(now()) @map("created_at") @db.Timestamptz()

  @@id([userId, friendId])
  @@map("friend")
}

model Post {
  id        String   @id @default(uuid()) @db.Uuid
  caption   String?
  createdAt DateTime @default(now()) @map("created_at") @db.Timestamptz()
  likes     Int      @default(0) //still keeping this here for easy quering
  views     Int      @default(0) // will use this when I implement the intersection observer API
  userId    String   @map("user_id")
  groupId   String?  @map("group_id")

  group Group? @relation(fields: [groupId], references: [id], onUpdate: Cascade, onDelete: Cascade)

  comments   Comment[]
  media      Media[]
  postLikes  PostLikes[]
  postViews  PostViews[]
  savedPosts SavedPosts[]
  hashTags   Hashtags[]

  @@map("post")
}

model Hashtags {
  id   String @id @default(uuid()) @db.Uuid
  name String

  postId String @map("post_id") @db.Uuid
  post   Post   @relation(fields: [postId], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@map("hashtags")
}

model PostLikes {
  postId String @map("post_id") @db.Uuid
  userId String @map("user_id")

  post Post @relation(fields: [postId], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@id([postId, userId])
  @@map("post_likes")
}

model PostViews {
  postId String @map("post_id") @db.Uuid
  userId String @map("user_id")

  post Post @relation(fields: [postId], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@id([postId, userId])
  @@map("post_views")
}

model SavedPosts {
  postId String @map("post_id") @db.Uuid
  userId String @map("user_id")

  post Post @relation(fields: [postId], references: [id], onDelete: Cascade)

  @@id([postId, userId])
  @@map("saved_posts")
}

// *****TODO: ATTACH USER TO MEDIA AND POST*****
// well if I do this, I don't technically need the "mediaUrls" in my post table, will keep that in mind
model Media {
  id        String   @id @default(uuid())
  type      String   @db.VarChar(20)
  url       String
  userId    String   @map("user_id") //clerk userId
  postId    String   @map("post_id") @db.Uuid
  createdAt DateTime @default(now()) @map("created_at") @db.Timestamptz()

  post       Post              @relation(fields: [postId], references: [id], onDelete: Cascade)
  labels     MediaLabels[]
  moderation MediaModeration[]

  @@map("media")
}

model MediaLabels {
  id         String @id @default(uuid()) @db.Uuid
  label      String
  confidence Float
  mediaId    String @map("media_id")

  media Media @relation(fields: [mediaId], references: [id], onDelete: Cascade)

  @@map("media_labels")
}

model MediaModeration {
  id              String @id @default(uuid()) @db.Uuid
  moderationLabel String
  confidence      Float
  mediaId         String @map("media_id")

  media Media @relation(fields: [mediaId], references: [id], onDelete: Cascade)

  @@map("media_moderation")
}

model Comment {
  id        String   @id @default(uuid()) @db.Uuid
  text      String
  createdAt DateTime @default(now()) @map("created_at") @db.Timestamptz()
  updatedAt DateTime @default(now()) @map("updated_at") @db.Timestamptz()
  likes     Int      @default(0)

  userId String @map("user_id") //clerk user id

  postId String @map("post_id") @db.Uuid
  post   Post   @relation(fields: [postId], references: [id], onDelete: Cascade)

  parentId String?  @map("parent_id") @db.Uuid
  parent   Comment? @relation("ParentChild", fields: [parentId], references: [id], onDelete: Cascade)

  replies Comment[] @relation("ParentChild")

  commentLikes CommentLikes[]

  @@map("comment")
}

model CommentLikes {
  commentId String @map("comment_id") @db.Uuid
  userId    String @map("user_id")

  post Comment @relation(fields: [commentId], references: [id])

  @@id([commentId, userId])
  @@map("comment_likes")
}

model Chat {
  id    String @id @default(uuid()) @db.Uuid
  userA String
  userB String

  message Message[]

  @@map("chat")
}

// read it as ChatParticipant for the sake of semanticness, singular
// model ChatParticipant {
//   id     String @id @default(uuid()) @db.Uuid
//   userId String @map("user_id")

//   Chat   Chat?   @relation(fields: [chatId], references: [id])
//   chatId String? @map("chat_id") @db.Uuid

//   @@map("chat_participants")
// }

model Message {
  id        String   @id @default(uuid()) @db.Uuid
  from      String //clerk userId
  to        String
  text      String
  createdAt DateTime @default(now()) @map("created_at") @db.Timestamptz()
  chatId    String  @map("chat_id") @db.Uuid

  Chat Chat @relation(fields: [chatId], references: [id])

  @@map("message")
}

model Event {
  id          String  @id @default(uuid())
  name        String
  description String
  location    String?
  date        String
  time        String
  organizerId String  @map("organizer_id") //clerk user id

  createdAt DateTime @default(now()) @map("created_at") @db.Timestamptz()

  EventUsers EventUsers[]
  EventMedia EventMedia?

  @@map("event")
}

model EventMedia {
  id  String @id @default(uuid())
  url String

  event   Event  @relation(fields: [eventId], references: [id], onDelete: Cascade)
  eventId String @unique @map("event_id")

  @@map("event_media")
}

model EventUsers {
  userId  String @map("user_id")
  eventId String @map("event_id")

  event Event @relation(fields: [eventId], references: [id], onDelete: Cascade)

  @@id([userId, eventId])
  @@map("event_users")
}

enum EventType {
  ONLINE
  ONSITE

  @@map("event_type")
}

model Group {
  id            String   @id @default(uuid())
  name          String
  description   String
  createdAt     DateTime @default(now()) @map("created_at") @db.Timestamptz()
  adminId       String   @map("admin_id")
  coverImageUrl String?  @map("cover_image_url")
  isPublic      Boolean

  groupUsers        GroupUsers[]
  posts             Post[]
  groupJoinRequests GroupJoinRequests[]

  @@map("group")
}

model GroupJoinRequests {
  userId    String          @map("user_id")
  groupId   String          @map("group_id")
  createdAt DateTime        @default(now()) @map("created_at") @db.Timestamptz()
  isInvite  Boolean         @default(false) // Flag to distinguish between join requests and invitations
  status    GroupJoinStatus @default(PENDING)

  group Group @relation(fields: [groupId], references: [id], onDelete: Cascade)

  @@id([userId, groupId])
  @@map("group_join_requests")
}

// this table will handle both invites and requets
// if the user has been invited, we add a row and set status as WAITING
// update to PENDING, if the user decides to join
// if the user joins without an invite, the status goes straight to PENDING

// isInvite can handle this, but only if we automatically make the user join the group after he accepts the invitation,
// but we still want to wait for acceptance, because technically non admins can also invite the user to join the group
enum GroupJoinStatus {
  WAITING_INVITE_RESPONSE
  PENDING
  ACCEPTED
  REJECTED

  @@map("group_join_status")
}

model GroupUsers {
  userId  String @map("user_id")
  groupId String @map("group_id")

  group Group @relation(fields: [groupId], references: [id])

  @@id([userId, groupId])
  @@map("group_users")
}

model Notification {
  id        String           @id @default(uuid()) @db.Uuid
  type      NotificationType
  userId    String           @map("user_id") // The user who will receive the notification
  senderId  String           @map("sender_id") // The user who triggered the notification
  entityId  String?          @map("entity_id") // The ID of the related entity (e.g., post, comment, etc.)
  content   String? // Optional content or message for the notification
  isRead    Boolean          @default(false) @map("is_read")
  createdAt DateTime         @default(now()) @map("created_at") @db.Timestamptz()

  @@map("notifications")
}

enum NotificationType {
  FRIEND_REQUEST
  NEW_MESSAGE
  POST_LIKE
  COMMENT_LIKE
  STORY_VIEW
  POST_COMMENT
  COMMENT_REPLY
  GROUP_INVITE
  EVENT_REMINDER
  GROUP_JOIN_REQUEST
  POST_FLAGGED
}
