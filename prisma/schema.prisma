// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model UserCoverImages {
  id       String  @id @default(uuid()) @db.Uuid
  url      String
  userId   String  @map("user_id") //clerk userId
  isActive Boolean @map("is_active") @db.Boolean

  @@map("user_cover_images")
}

enum FriendRequestStatus {
  PENDING
  ACCEPTED
  DENIED

  @@map("friend_request_status")
}

//if a friend req is denied, it might not be needed to kept in the table
//but this will suffice for now, I presume
//also, sent and received don't need to be separate tables, one will suffice with the current requirements
model FriendRequests {
  senderId   String              @map("user_a_id")
  receiverId String              @map("user_b_id")
  createdAt  DateTime            @default(now()) @map("created_at") @db.Timestamptz()
  status     FriendRequestStatus

  @@id([senderId, receiverId])
  @@unique([senderId, receiverId])
  @@map("friend_requests")
}

model Friend {
  userId    String   @map("user_id")
  friendId  String   @map("friend_id")
  createdAt DateTime @default(now()) @map("created_at") @db.Timestamptz()

  @@id([userId, friendId])
  @@map("friend")
}

model Post {
  id        String   @id @default(uuid()) @db.Uuid
  caption   String?
  createdAt DateTime @default(now()) @map("created_at") @db.Timestamptz()
  likes     Int      @default(0) //still keeping this here for easy quering
  views     Int      @default(0) // will use this when I implement the intersection observer API
  userId    String   @map("user_id")
  groupId   String?  @map("group_id")

  group Group? @relation(fields: [groupId], references: [id], onUpdate: Cascade, onDelete: Cascade)

  comments   Comment[]
  media      Media[]
  postLikes  PostLikes[]
  postViews  PostViews[]
  savedPosts SavedPosts[]

  @@map("post")
}

model PostLikes {
  postId String @map("post_id") @db.Uuid
  userId String @map("user_id")

  post Post @relation(fields: [postId], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@id([postId, userId])
  @@map("post_likes")
}

model PostViews {
  postId String @map("post_id") @db.Uuid
  userId String @map("user_id")

  post Post @relation(fields: [postId], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@id([postId, userId])
  @@map("post_views")
}

model SavedPosts {
  postId String @map("post_id") @db.Uuid
  userId String @map("user_id")

  post Post @relation(fields: [postId], references: [id], onDelete: Cascade)

  @@id([postId, userId])
  @@map("saved_posts")
}

// *****TODO: ATTACH USER TO MEDIA AND POST*****
// well if I do this, I don't technically need the "mediaUrls" in my post table, will keep that in mind
model Media {
  id        String   @id @default(uuid())
  type      String   @db.VarChar(20)
  url       String
  userId    String   @map("user_id") //clerk userId
  postId    String   @map("post_id") @db.Uuid
  createdAt DateTime @default(now()) @map("created_at") @db.Timestamptz()

  post Post @relation(fields: [postId], references: [id], onDelete: Cascade)

  @@map("media")
}

model Comment {
  id        String   @id @default(uuid()) @db.Uuid
  text      String
  createdAt DateTime @default(now()) @map("created_at") @db.Timestamptz()
  updatedAt DateTime @default(now()) @map("updated_at") @db.Timestamptz()
  likes     Int      @default(0)

  userId String @map("user_id") //clerk user id

  postId String @map("post_id") @db.Uuid
  post   Post   @relation(fields: [postId], references: [id], onDelete: Cascade)

  parentId String?  @map("parent_id") @db.Uuid
  parent   Comment? @relation("ParentChild", fields: [parentId], references: [id], onDelete: Cascade)

  replies Comment[] @relation("ParentChild")

  commentLikes CommentLikes[]

  @@map("comment")
}

model CommentLikes {
  commentId String @map("comment_id") @db.Uuid
  userId    String @map("user_id")

  post Comment @relation(fields: [commentId], references: [id])

  @@id([commentId, userId])
  @@map("comment_likes")
}

model Event {
  id          String    @id @default(uuid()) @db.Uuid
  name        String
  description String
  type        EventType
  location    String?
  startDate   DateTime  @map("start_date")
  endDate     DateTime  @map("end_date")
  organizerId String    @map("organizer_id") //clerk user id

  @@map("event")
}

model EventUsers {
  userId  String @map("user_id")
  eventId String @map("event_id")

  @@id([userId, eventId])
  @@map("event_users")
}

enum EventType {
  ONLINE
  ONSITE

  @@map("event_type")
}

model Group {
  id            String   @id @default(uuid())
  name          String
  description   String
  createdAt     DateTime @default(now()) @db.Timestamptz() @map("created_at")
  adminId       String   @map("admin_id")
  coverImageUrl String?  @map("cover_image_url")

  groupUsers GroupUsers[]
  posts      Post[]

  @@map("group")
}

model GroupUsers {
  userId  String @map("user_id")
  groupId String @map("group_id")

  group Group @relation(fields: [groupId], references: [id])

  @@id([userId, groupId])
  @@map("group_users")
}
